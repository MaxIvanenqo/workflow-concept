name: Build & Deploy Release

on:
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    environment: prod
    steps: 
        - uses: actions/checkout@v3
        - name: dump context
          uses: ./.github/workflows/composite/dump-context
        
        - name: Setup environment and variables
          id: var-setup
          uses: ./.github/workflows/composite/setup
    
        - name: Create maven settings
          run: |
            ./.github/workflows/scripts/create-maven-settings.sh ${{ secrets.REPOSITORY_URL }} ${{ secrets.SERVER_ID }} ${{ secrets.SERVER_USERNAME }} ${{ secrets.GITHUB_TOKEN }}
          shell: bash
            
        - name: Clean & verify
          run: |
            mvn -P release clean verify ${{ steps.var-setup.outputs.MAVEN_OPTS }}
  
  sonar:
    runs-on: ubuntu-latest
    environment: dev
    name: Analyse
    needs: build
    steps: 
        - uses: actions/checkout@v3
        - uses: ./.github/workflows/composite/sonar

  stage-release:
    needs: build
    if: success()
    name: Stage Release
    outputs: 
      version: ${{ steps.stage.outputs.version }}
    runs-on: ubuntu-latest
    environment: prod
    steps:
        - uses: actions/checkout@v3
        - name: dump context
          uses: ./.github/workflows/composite/dump-context
    
        - name: Setup environment and variables
          id: var-setup
          uses: ./.github/workflows/composite/setup

        - name: Create maven settings
          run: |
            ./.github/workflows/scripts/create-maven-settings.sh ${{ secrets.REPOSITORY_URL }} ${{ secrets.SERVER_ID }} ${{ secrets.SERVER_USERNAME }} ${{ secrets.GITHUB_TOKEN }}
          shell: bash

        - name: Resolve release version
          run: |
            VERSION=$(./.github/workflows/scripts/get-version.sh)
            MAJOR=$(cut -d'.' -f1 <<<"$VERSION") MINOR=$(cut -d'.' -f2 <<<"$VERSION") 
            mvn -P release versions:use-releases
          shell: bash

        - name: Get updated version
          run: |
            VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "Updated version is $VERSION"
          shell: bash

        - name: Stage release
          id: stage
          run: |
            MVN_ARTIFACT_ID=$(./.github/workflows/scripts/get-artifact.sh)
            VERSION=$(./.github/workflows/scripts/get-version.sh)
            git checkout -b release-$VERSION
            git fetch
            git commit -a -m "build release $MVN_ARTIFACT_ID-$VERSION"
            git push origin release-$VERSION
            echo "::set-output name=version::release-$VERSION"

  deploy:
    needs: stage-release
    name: Deploy snapshot to Prod server
    runs-on: ubuntu-latest
    outputs: 
        branch: ${{ steps.deploy-branch.outputs.branch }}
    environment: prod
    steps:
        - uses: actions/checkout@v3
        - name: Stage release
          id: deploy-branch
          run: |
            echo "::set-output name=branch::release-$(./.github/workflows/scripts/get-version.sh)"
            echo "::set-output name=artifactId::release-$(./.github/workflows/scripts/get-artifact.sh)"
        - name: Deploy to Prod server
          uses: ./.github/workflows/composite/deploy
          with:
            PROFILE: "release"
            BRANCH: ${{ steps.deploy-branch.outputs.branch }}
            REPOSITORY_URL: ${{ secrets.REPOSITORY_URL }}
            SERVER_ID: ${{ secrets.SERVER_ID }}
            SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
            SERVER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  
  post-deploy:
    needs: [deploy, stage-release]
    if: success()
    name: Set next dev iteration
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v3
      - name: dump context
        uses: ./.github/workflows/composite/dump-context
    
      - name: Setup environment and variables
        id: var-setup
        uses: ./.github/workflows/composite/setup

      - name: Create maven settings
        run: |
          ./.github/workflows/scripts/create-maven-settings.sh ${{ secrets.REPOSITORY_URL }} ${{ secrets.SERVER_ID }} ${{ secrets.SERVER_USERNAME }} ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - name: Rebase
        run: |
          git fetch
          git pull --all
          git rebase origin/${{needs.stage-release.outputs.version}}
          
      - name: Create new release tag
        run: |
          MVN_ARTIFACT_ID=$(./.github/workflows/scripts/get-artifact.sh)
          VERSION=$(./.github/workflows/scripts/get-version.sh)
          TAG="release-$MVN_ARTIFACT_ID-$VERSION"
          git tag -a "$TAG" -m "noissue tag release $VERSION"
          echo "::set-output name=release-tag::$TAG"
          git push origin dev --follow-tags

      - name: Tag & Commit next DEV iteration
        run: |
          
          mvn -P release build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT
          
          MVN_ARTIFACT_ID=$(./.github/workflows/scripts/get-artifact.sh)
          VERSION=$(./.github/workflows/scripts/get-version.sh)
          MAJOR=$(cut -d'.' -f1 <<<"$VERSION") MINOR=$(cut -d'.' -f2 <<<"$VERSION")
        
          # mvn -P release versions:update-parent -DparentVersion=[$MAJOR.$MINOR.0-SNAPSHOT,$MAJOR.$MINOR.999-SNAPSHOT] -DallowSnapshots=true -DgenerateBackupPoms=false
         
          git commit -am "noissue set next snapshot $VERSION"
          git push origin dev
